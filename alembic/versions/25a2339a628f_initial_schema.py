<<<<<<< HEAD
revision = '25a2339a628f'
down_revision = 'dd245b139879'

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transactions', sa.Column('sender_email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('transactions', sa.Column('recipient_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('transactions', sa.Column('gateway', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('transactions', sa.Column('relationship', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('transactions', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.alter_column('transactions', 'amount',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=True)
    op.alter_column('transactions', 'tx_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('transactions', 'rate')
    op.drop_column('transactions', 'to_currency')
    op.drop_column('transactions', 'from_currency')
    op.drop_column('transactions', 'user_id')
    op.create_table('recipient_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sender_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sender_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('origin_country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('origin_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('origin_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recipient_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('relationship', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('destination_country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('destination_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('destination_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('recipient_profiles_pkey'))
    )

    # Safe drop: ix_advances_id may already be removed by prior migration
    from sqlalchemy import inspect
    bind = op.get_bind()
    inspector = inspect(bind)
    indexes = [ix['name'] for ix in inspector.get_indexes('advances')]
    if 'ix_advances_id' in indexes:
        op.drop_index('ix_advances_id', table_name='advances')

    op.drop_table('advances')
    # ### end Alembic commands ###
=======
"""initial_schema

Revision ID: 25a2339a628f
Revises: 
Create Date: 2025-10-24 00:00:00.000000
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = "25a2339a628f"
down_revision = None
branch_labels = None
depends_on = None


def _table_exists(inspector, name: str) -> bool:
    try:
        return name in inspector.get_table_names()
    except Exception:
        return False


def upgrade() -> None:
    """Create base tables in an import-safe, idempotent way."""
    bind = op.get_bind()
    inspector = inspect(bind)

    # Example: create users table if missing
    if not _table_exists(inspector, "users"):
        op.create_table(
            "users",
            sa.Column("id", sa.Integer(), primary_key=True, autoincrement=True),
            sa.Column("email", sa.String(320), nullable=False),
            sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        )

    # Example: create offers table if missing
    if not _table_exists(inspector, "offers"):
        op.create_table(
            "offers",
            sa.Column("id", sa.Integer(), primary_key=True, autoincrement=True),
            sa.Column("user_id", sa.Integer(), nullable=False),
            sa.Column("title", sa.String(), nullable=False),
            sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        )

    # If this migration also intended to create advances, guard creation here as well
    if not _table_exists(inspector, "advances"):
        op.create_table(
            "advances",
            sa.Column("id", sa.Integer(), primary_key=True, autoincrement=True),
            sa.Column("user_id", sa.Integer(), nullable=False),
            sa.Column("uuid", sa.String(), nullable=False),
            sa.Column("country", sa.String(), nullable=False),
            sa.Column("currency_from", sa.String(), nullable=False),
            sa.Column("currency_to", sa.String(), nullable=False),
            sa.Column("amount_from", sa.Float(), nullable=False),
            sa.Column("amount_to", sa.Float(), nullable=False),
            sa.Column("amount", sa.Float(), nullable=False),
            sa.Column("market_rate", sa.Float(), nullable=False),
            sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
            sa.PrimaryKeyConstraint("id", name=op.f("advances_pkey")),
            sa.UniqueConstraint("uuid", name=op.f("advances_uuid_key")),
        )


def downgrade() -> None:
    """Tear down objects created above if present."""
    bind = op.get_bind()
    inspector = inspect(bind)

    if _table_exists(inspector, "advances"):
        try:
            op.drop_table("advances")
        except Exception:
            pass

    if _table_exists(inspector, "offers"):
        try:
            op.drop_table("offers")
        except Exception:
            pass

    if _table_exists(inspector, "users"):
        try:
            op.drop_table("users")
        except Exception:
            pass
>>>>>>> 6b1db87 (Initial commit for trueque_web independent repo)
